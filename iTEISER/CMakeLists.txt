cmake_minimum_required(VERSION 2.8.4)
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR})

project(seed_creator)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
set(SOURCE_FILES seed_creator.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c create_motifs.c)
add_executable(seed_creator ${SOURCE_FILES})

project(mi_find_seed)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
set(SOURCE_FILES mi_find_seed.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
add_executable(mi_find_seed ${SOURCE_FILES})

set(SOURCE_FILES mi_optimize.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_optimize)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_optimize ${SOURCE_FILES})

set(SOURCE_FILES mi_report.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_report)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_report ${SOURCE_FILES})

set(SOURCE_FILES motif_page_run.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(motif_page_run)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(motif_page_run ${SOURCE_FILES})

set(SOURCE_FILES mi_motif_motif_interaction.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_motif_motif_interaction)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_motif_motif_interaction ${SOURCE_FILES})

set(SOURCE_FILES combine_motifs.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(combine_motifs)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(combine_motifs ${SOURCE_FILES})

set(SOURCE_FILES final_motif_motif_interaction.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(final_motif_motif_interaction)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(final_motif_motif_interaction ${SOURCE_FILES})

set(SOURCE_FILES mi_conserve.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_conserve)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_conserve ${SOURCE_FILES})

set(SOURCE_FILES get_motif_at_index.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(get_motif_at_index)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(get_motif_at_index ${SOURCE_FILES})

set(SOURCE_FILES print_motifs.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(print_motifs)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(print_motifs ${SOURCE_FILES})

set(SOURCE_FILES mi_report_motif_family_count_based.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_report_motif_family_count_based)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_report_motif_family_count_based ${SOURCE_FILES})

set(SOURCE_FILES mi_report_motif_family.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_report_motif_family)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_report_motif_family ${SOURCE_FILES})

set(SOURCE_FILES mi_report_gene_list.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_report_gene_list)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_report_gene_list ${SOURCE_FILES})

set(SOURCE_FILES make_variant_family_for_structural_motif.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c create_motifs.c)
project(make_variant_family_for_structural_motif)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(make_variant_family_for_structural_motif ${SOURCE_FILES})

set(SOURCE_FILES scan_sequences_for_motif_match_count.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(scan_sequences_for_motif_match_count)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(scan_sequences_for_motif_match_count ${SOURCE_FILES})

set(SOURCE_FILES mi_cond_inf_ratio.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_cond_inf_ratio)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_cond_inf_ratio ${SOURCE_FILES})

set(SOURCE_FILES combine_motifs_into_file.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(combine_motifs_into_file)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(combine_motifs_into_file ${SOURCE_FILES})

set(SOURCE_FILES match_motif_to_seq.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(match_motif_to_seq)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(match_motif_to_seq ${SOURCE_FILES})

set(SOURCE_FILES manual_mutations_in_a_motif.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(manual_mutations_in_a_motif)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(manual_mutations_in_a_motif ${SOURCE_FILES})

set(SOURCE_FILES get_variant_family_for_structural_motif.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(get_variant_family_for_structural_motif)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(get_variant_family_for_structural_motif ${SOURCE_FILES})

set(SOURCE_FILES scan_sequence_pairs_for_seed_presence.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(scan_sequence_pairs_for_seed_presence)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(scan_sequence_pairs_for_seed_presence ${SOURCE_FILES})

set(SOURCE_FILES mi_mi_seed.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(mi_mi_seed)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(mi_mi_seed ${SOURCE_FILES})

set(SOURCE_FILES partition_seeds.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(partition_seeds)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(partition_seeds ${SOURCE_FILES})

set(SOURCE_FILES find_threshold_for_mi_values.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(find_threshold_for_mi_values)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(find_threshold_for_mi_values ${SOURCE_FILES})

set(SOURCE_FILES scan_sequence_pairs_for_structural_motif_presence.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(scan_sequence_pairs_for_structural_motif_presence)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(scan_sequence_pairs_for_structural_motif_presence ${SOURCE_FILES})

set(SOURCE_FILES scan_sequences_for_motif_profile.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(scan_sequences_for_motif_profile)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(scan_sequences_for_motif_profile ${SOURCE_FILES})

set(SOURCE_FILES combine_motifs_from_files.c dataio.c hashtable.c readFASTA.c read_write_motif.c information.c mi_library.c teiser_functions.c statistics.c sequences.c matchmaker.c folding_energy.c)
project(combine_motifs_from_files)
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
add_executable(combine_motifs_from_files ${SOURCE_FILES})

